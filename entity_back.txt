
    
class ScheduleLog(BaseModel):
    numLote = TextField()
    executionDate = DateTimeField()
    errorMessage = TextField()
    status = TextField()
    integrationStatus = TextField()
    schedule = ForeignKeyField(Schedule, backref='scheduleLogs')
    #private List<ScheduleLogIntergrationError> taxOneErrors;
    
    def toJson(self):
        return '{' + '"id" : ' + str(self.id) + ',' + '"executionDate" : "' + str(self.executionDate) + '",' + '"status" : "' + self.status + '",' + '"scheduleName" : "' + self.schedule.name + '" }'
    
    def toJsonFull(self):
        taxOneErrorsJson = '[]'
        if len(self.taxOneErrors) > 0:
            taxOneErrorsJson = '['
            for taxOneError in self.taxOneErrors:      
                taxOneErrorsJson = taxOneErrorsJson + taxOneError.toJson() + ','
            taxOneErrorsJson = taxOneErrorsJson[0:len(taxOneErrorsJson)-1] + ']'

        return '{' + '"id" : ' + str(self.id) + ',' + '"executionDate" : "' + str(self.executionDate) + '",' + '"status" : "' + self.status + '",' + '"scheduleName" : "' + self.schedule.name + '", "taxOneErrors" : ' + taxOneErrorsJson + '}'
    
    
class ScheduleLogIntergrationError(BaseModel):
    numeroReg = IntegerField()
    codigoErro = TextField()
    descricaoErro = TextField()
    nomeCampo = TextField()
    chaveRegistro = TextField()
    scheduleLog = ForeignKeyField(ScheduleLog, backref='taxOneErrors')
    
    def toJson(self):
        return '{' + '"id" : ' + str(self.id) + ',' + '"numeroReg" : "' + str(self.numeroReg) + '",' + '"codigoErro" : "' + self.codigoErro + '",' + '"descricaoErro" : "' + self.descricaoErro + '",' + '"nomeCampo" : "' + self.nomeCampo + '",' + '"chaveRegistro" : "' + self.chaveRegistro + '" }'
    


NoteThroughDeferred = DeferredThroughModel()


class SAFXTableSchedule(BaseModel):
    safxTable = ForeignKeyField(SAFXTable)
    schedule = ForeignKeyField(Schedule)

    class Meta:
        primary_key = False
        table_name = 'safxtable_schedule'

NoteThroughDeferred.set_model(SAFXTableSchedule)

db.create_tables([Email, User, Upload, DataSourceConfiguration, DSTable, DSColumn, SAFXTable, SAFXColumn, Schedule, ScheduleLog, ScheduleLogIntergrationError, Criteria, SAFXTable.schedules.get_through_model()])



